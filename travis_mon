#!/bin/bash
# SPDX-Identifier: gpl-2.0-or-later
# Copyright (C) 2019, Red Hat, Inc.
#
# Monitors a travis build history for builds in a series
# Records the builds in the series database (and emits them on the
# stdout line for processing)
#
# Licensed under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.  You may obtain a copy of the
# license at
#
#    https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

[ -f "${HOME}/.travis-rc" ] && source "${HOME}/.travis-rc"
[ -f "${HOME}/.pwmon-rc" ] && source "${HOME}/.pwmon-rc"

source $(dirname $0)/travis_lib.sh
source $(dirname $0)/series_db_lib.sh

if [ "$1" != "" ]; then
    pw_instance="$1"
    shift
fi

if [ "$1" != "" ]; then
    travis_api_server="$1"
    shift
fi

if [ "$1" != "" ]; then
    travis_credential="$1"
    shift
fi

function submit_result() {
    echo "pw:$2:build:$4:sha:$6:$1"
}

function process_build() {
    local pw_instance="$1"
    local pw_project="$2"
    local series_id="$3"
    local series_url="$4"
    local series_sha="$5"
    local build_state="$6"

    if [ "$build_state" == "created" ]; then
        echo "started"
        return
    fi
    
    if [ "$build_state" == "errored" ]; then
        echo "restart this one"
        return
    fi

    if [ "$build_state" == "canceled" ]; then
        echo "cancel"
        return
    fi

    if [ "$build_state" == "failed" -o "$build_state" == "passed" ]; then
        echo "submit..."
        submit_result "$build_state" "$pw_instance" "$pw_project" "$series_id" \
                      "$series_url" "$series_sha"
        return
    fi
}

for branch in $(series_get_active_branches "$pw_instance"); do
    series_id=$(echo $branch | cut -d\| -f1)
    project=$(echo $branch | cut -d\| -f2)
    series_url=$(echo $branch | cut -d\| -f3)
    travis_repo=$(echo $branch | cut -d\| -f4)
    branchname=$(echo $branch | cut -d\| -f5)

    travis_builds_for_branch "$travis_api_server" "$travis_credential" "$travis_repo" \
                             "$branchname" | \
        while IFS=, read -r build_shasum build_state start_time end_time; do

        # try to go by series first
        echo Checking series $series_id
        process_build "$pw_instance" "$project" "$series_id" "$series_url" \
                      "$build_shasum" "$build_state"
    done

done
